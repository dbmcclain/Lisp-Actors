;; lattice-key-exchange.lisp
;;
;; DM/RAL  2023/03/24 03:26:29
;; ----------------------------------

(defpackage #:com.ral.crypto.lattice-key-exchange
  (:use #:common-lisp #:lattice #:vec-repr #:hash #:ac)
  (:export
   #:lattice-skey
   #:lattice-pkey
   #:random-key
   #:make-aes-packet
   #:decode-aes-packet
   #:make-connection-to-server-packet
   #:make-connection-to-client-packet
   #:decode-server-connection-packet
   #:decode-client-connection-packet

   #:cnx-packet-encoder
   #:cnx-packet-decoder

   #:my-pkeyid
   #:srv-pkeyid
   ))

(in-package #:com.ral.crypto.lattice-key-exchange)

;; ----------------------------------
;;
;; Store skey seed in system keychain with:
;;  security add-generic-password -a $USER -s 'LispActorsSystem' -w <key>
;;
;; If you need to delete before adding:
;;  security delete-generic-password -a $USER -s 'LispActorsSystem'

(deflex lattice-skey
  (create
   (alambda
    ((cust)
     (flet (
            #+:MACOSX
            (get-seed ()
              (let ((txt (with-output-to-string (s)
                           ;; Using Mac KeyChain to hold secret keying
                           (sys:call-system-showing-output
                            "security find-generic-password -a $USER -s 'LispActorsSystem' -w"
                            :output-stream s))))
                (subseq (cadr (um:split-string txt :delims '(#\newline))) 2)))
            #+:WINDOWS
            (get-seed ()
              (with-open-file (f "~/.my-syzygy")
                (read f))) )
       (let ((me  self))
         (β (sys)
             (send lattice-system β)
           (let* ((seed (get-seed))
                  ;; (skey (lat2-gen-deterministic-skey sys seed))
                  (skey (flat-gen-deterministic-skey sys seed)))
             (send me cust :update skey) ))
         )))
    
    ((cust :update skey)
     (become (const-beh skey))
     (send cust skey))
    )))

(deflex lattice-pkey
  (create
   (lambda (cust pkey-id)
     (β (pkey)
         (send kvdb:kvdb β :find pkey-id)
       (when pkey ;; if not found, just drop things on the floor...
         (send cust pkey)))
     )))

(deflex lat2-encoder
  (create
   (lambda (cust pkey v)
     (β (sys)
         (send lattice-system β)
       (let ((enc (ignore-errors
                    ;; (lat2-encode pkey v sys)
                    (flat-encode pkey v sys)
                    )))
         (when enc
           (send cust enc)))
       ))
   ))

(deflex lat2-decoder
  (create
   (lambda (cust cs)
     (β (sys)
         (send lattice-system β)
       (β (skey)
           (send lattice-skey β)
         (let ((dec (ignore-errors
                      ;; (lat2-decode skey cs sys)
                      (flat-decode skey cs sys)
                      )))
           (when dec
             (send cust dec)))
         )))
   ))

;; ------------------------------------------------------
;; AES-256/CTR Encryption/Decryption

(defun random-key ()
  (vec (hash/256 :random-key (uuid:make-v1-uuid)
                 (prng:ctr-drbg 256))))

(defun aes-enc/dec (key iv vsrc)
  (let ((cipher (ironclad:make-cipher :aes
                                      :mode :ctr
                                      :key  key
                                      :initialization-vector iv)))
    (ironclad:encrypt-in-place cipher vsrc)
    vsrc))

(defun make-auth-chk (key iv cdata)
  (vec (hash/256 :chk key iv cdata)))

(defun make-iv (key)
  (subseq
   (vec (hash/256 :iv key (uuid:make-v1-uuid)))
   0 16))

(defun make-aes-packet (key &rest data)
  (let* ((vdata  (loenc:encode (loenc:unshared-list data)
                               :max-portability t))
         (iv     (make-iv key))
         (cdata  (aes-enc/dec key iv vdata))
         (chk    (make-auth-chk key iv cdata)))
    (list iv cdata chk)
    ))

(defun decode-aes-packet (key packet)
  (destructuring-bind (iv cdata &optional chk) packet
    (cond
     (chk ;; a normal packet
          (let ((chkx (make-auth-chk key iv cdata)))
            (when (equalp chkx chk) ;; just drop on the floor if not valid
              (let ((vdata  (aes-enc/dec key iv cdata)))
                (loenc:decode vdata)))
            ))
     (t ;; an unauthenticated packet used for initial handshake dance
        (let ((vdata  (aes-enc/dec key iv cdata)))
          (loenc:decode vdata)))
     )))

#|
   -----------------------------------------------------
   Secure Key Exchange
  
      client                                server
      --------------------------            ---------------------------
      Random Kc
      Ps = Lookup(SrvID)
      LatEnc(Ps, Kc), AES(Kc,CliID)  -->    Check CliID for membership
                                            Pc = Lookup(CliID)
                                            Random Ks
                                            Kses = H(Ks, Kc)
                                     <--    LatEnc(Pc, Ks)
      Kses = H(Ks, Kc)
  
      AES(Kses, Data)                -->
                                     <--    AES(Kses, Reply)
      ...
  
|#

(deflex cnx-packet-encoder
  (create
   (lambda (cust dest-pkeyid &rest info)
     (β (pkey) ;; if not found just drop things on the floor
         (send lattice-pkey β dest-pkeyid)
       (let* ((rkey       (random-key))
              (aes-packet (ignore-errors
                            (apply #'make-aes-packet rkey #|:canary|# info))))
         (when aes-packet
           (β (lat-enc)
               (send lat2-encoder β pkey rkey)
             (send cust rkey lat-enc aes-packet)
             )))))
   ))

(deflex cnx-packet-decoder
  (create
   (lambda (cust latcrypt aescrypt)
     ;; During handshake we exchange pairs of packets. The first is a
     ;; Lattice encrypted random key, the second is an AES encrypted
     ;; packet using that key.
     ;;
     ;; Return both the random key and the decrypted info.
     ;; Client/Server differ only in the contents of that info.
     (β (rkey)
         (send lat2-decoder β latcrypt)
       (let ((info (ignore-errors
                     (decode-aes-packet rkey aescrypt))))
         #|
         (when (and (consp info)
                    (eq (car info) :canary))
           (send cust rkey (cdr info)))
         |#
         (when (consp info)
           (send cust rkey info))
         )))
   ))

;; ----------------------------------------------------
;; For Actors-based code, using parallel Lattice encryption

(deflex my-pkeyid
  (create (lambda (cust)
            (send kvdb:kvdb cust :find :my-fpkeyid))
          ))

(deflex srv-pkeyid
  (const ;; "{d73be812-5309-11ee-9c10-f643f5d48a65}" ;; for 320x256 1-bit system
         ;; "{030DB608-B3D8-11EE-A642-80FF8DB0CE01}" ;; for 160x128 1-bit system
         "{B2DA77DC-B596-11EE-8E31-CB2DA3737401}" ;; for 160x128 8-bit system
         ))

#|
(inspect (ask lattice-system))
(inspect (ask lattice-skey))
(let* ((v (vec (hash/256 :test)))
       (sys (ask lattice-system))
       (skey (ask lattice-skey))
       (pkey (ask lattice-pkey (ask my-pkeyid)))
       (enc (flat-encode pkey v sys))
       (dec (flat-decode skey enc sys)))
  (assert (equalp v dec)))
|#

#|
  
(let* ((sys  (ask lattice-system))
       (skey (ask lattice-skey))
       (pkey (fgen-pkey skey sys)))
  (send kvdb:kvdb sink :add "{B2DA77DC-B596-11EE-8E31-CB2DA3737401}" pkey))

(send kvdb:kvdb sink :add :my-fpkeyid "{B2DA77DC-B596-11EE-8E31-CB2DA3737401}")

(with-standard-io-syntax
  (prin1 (ask kvdb:kvdb :find (ask kvdb:kvdb :find :my-fpkeyid)))
  (values))

(with-standard-io-syntax
  (prin1 (ask kvdb:kvdb :find :flat-system))
  (values))

;; ---------------------------------------------------------------------
;; To be used on foreign nodes...


;; Provide the System Matrix
(send kvdb:kvdb sink :add :flat-system
      '(:NBITS 320 :NCODE 256 :NROWS 160 :NCOLS 1 :MODULUS 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936379 :NNOISE 58 :MAT-A #(#(89701749763051235492579133455413641767882991870396332352062767832986021280291542515881929639839) #(199355120051118476477493891381728615360857149836655655449634137773569875281072067752497913452195) #(372648874461654137683242229856366466914357092560148079761181987829621582931952540251748337395032) #(2132603342345226632053907667694503506289449267260348138466695416905421585997673471428552318929842) #(216521014433170169301768418626388701310454855246903139742740323836021097451548454779274984045853) #(484544483900590059297550265908084602540942185978506247770066709381198108712698341035325937797581) #(1543943495820204088207120976012310066385865265039737030817963086846058453102048704598106115206714) #(1190018242449465914247846841289889780133772642343515196681576895508519660383245841646862672793272) #(2095465023956175860715766053755685318735295059344443006540086587104964582311695420102363599536625) #(1102057650259191463491159920172350532626620030033658179982426040326656964735722433992427023215851) #(1217714864302571400889121730241789104677969164985478135589168613106959454143063534931126180351229) #(30237694922944473481839667770922480893034095166915148065575608427055450140678526194367473611002) #(1163112086717570493345169940715707073920910835957443662683198554500329911728826807832851085637396) #(1086725976313623718816619962385905424296364442042622806781365008050140187332104549448835782605695) #(1303308231054889121054014257217967629748571623649643997922254610692675437120927062457827537451753) #(499433077613149662474579610285541295365770267143576300383826484925119852398166425934167246581351) #(1682392016412887972870157494828048580024260856558163492864253380146759840168374194186488874362277) #(481919189900512970696761307367416824415972891966636928234781372894203173518072480920990783996632) #(906141769901853274081650434549547598505663399305708265194950939119428055563687284321840602461908) #(2126157312097279837704735673499195478305357792201761120993022423937207678341047023193150760587858) #(1818894442730543285400129008477741396604508651757291734606325765977309386527612877880424859211520) #(434218254403507836493040832041472872753357447841050352184089993117265120568484464878891965609993) #(533756193289100429933921188095365884697682934453240694988743931130993516526304271580623830620122) #(740918471915996910257912600141592178694859312353696220987896615667023535680255159472288465931126) #(1865499640394497994634532240021816295073657437788975605155370678709266343835961626947719637082876) #(1830107620670402340755220672502349887424475572166535662885172682904603731324219469908789081380521) #(221958985185649303278095867717490544491593042697250441145302186246599493880172980611471682166528) #(2124531242954196473271506870409228835195030196496743307530937983702785232115812819684838459648937) #(875176643882352768199978106074488166949317553688732720540059338880885200336739558607174431645841) #(1588455407022299830771550229056114983149320408592601238045236575515154301269432909403137128025007) #(888659177261479341983855320757818235796366610705951531487561275107896146620935972806119544066436) #(411244448698515147809971041886493344571309111068613576536426476931019656090416137232368202650606) #(97054566953898169641104210360556873921666678866266321580560449812673467216791160578982776394784) #(1707142481517856817279471963209674744563380613313561311062593710810834533564578127763439821898894) #(899995368221204477851753246139592643620836017047074440151283674587650386928715081173561749719070) #(201950821690563705563885089133212002990199979485309122520241825709785374443133376417314994090667) #(548815539117635223398604964215956680030990550869624163311737334542186549901155513934091695027955) #(1041434396584871214398060093903724025880703843912167903872262830488639793188033674071653313457249) #(1286478887808532094195716588369138933677972886048965962923004341541285317221494994708072889669362) #(425864857118237375392966322949915126393699222530875873549378801126812689081450970898438436822378) #(2060079897639288394214216731737030712194409110740419498073461455494312154358785637170035882147817) #(1010874378885392834719985613238357103348943148243136205100844259110730982504642970294612051493062) #(1467230861751779337566483348748790782294304938673026832013315148455175963036867289728465469875733) #(1115125981119615112336357554538640366845004143799869444812042385530791689857655758399462678144590) #(817975658160968969635328166380323618769140171290426933620208744777651575269971557545481019349415) #(1441928032308659951434310271665526979170036571758642866787637322256735380632786859434618979270275) #(506082440028796902637703335384083657935045014837576872514338426891037976377524275219377908530935) #(1454384196443086695562208947138209669583062792523692350976441575566575528810533504630853316180944) #(1712229416718301813846231553615311994105523565046915614686756255407551852075919257889449007564197) #(802547388332368464505164684669630999353322054734651966927618148148040568999283245351675724134942) #(124428814039600768977204822100280464598906830321583242576874616091686649415872914305942362734138) #(1635419899620892574770692792256129456197788582586155684790971132785703548359882021037116624100204) #(1125456334385765628745914233228191153886277734455769191763191401582757894888840632132034464931934) #(1422911372601489726097342887260869092299647919679264315519383608841677978008373569442516753265465) #(1364676785506315940190317320599915678005083231392296445657305735355400073724203588644380494021555) #(1499838237060414187877365992810957423495423145444714963931650700896251436723116199240254960708381) #(1262980486867419251954858668109860403957013218168886579114559342261735028311542389087250883122559) #(1281872250874406172199460329386894252172710591453384337779384452473175525667411871591094752478094) #(1224777624029208128303211629184593515675628518892656131473502042724622952782779609053379139719992) #(391997605081743861359457945210107211869843668670328240229923566822827053109477258685629948939870) #(910658633649302491113195722236111366712813938655377138750663667226046157804124727311597735666144) #(2066911182968497929524275268248526200742121197302429031396796191339837214595789415104014507050949) #(156372311232570465277515727412435323073407117088483732709159208423368541278427824546057822484129) #(1653353746774637993779920413994069601775820895114776512084650575949216000991087204353479988946536) #(1157317817883046941638643760184183433663212677556515694691067693876064579008992693258855387868963) #(1190641388387673897078258510638973374155972620336862756933425698324966170822330758191143637771136) #(871311948988368344293723271841788219446247924477146993067899138816557343707224230156947437676101) #(665380476467242260622952481801712554706233764853467304263214899471249268920994564868187866843406) #(626619939703218454340858462205186747461026435030266656926812364171217706486767381976774489851908) #(567133968355920773864373921384519624772368824685195172259686481946720019108081713939251044869638) #(848953480931845959199597940146171326298069201517180647203896484654634065044033135485668738643316) #(1164460390054664488143965278517457435093293654805488502725995510499939776970563522533381547795373) #(522160564478365761117634734021768935561017477260265611562092331176435270361320417950848470070256) #(1501692008091212480663679963755259479541144055021429213583243014097996146918360806298593184732489) #(1652734462322754017717307215782228391327225046198224778759369601074525275697453927849168330898960) #(601710495404424577592284020223902844980207953028864681055961191155772965380802030524017225601904) #(1180293568946626226574577341675369914351855985272221653086872182194313504804767290065321417260662) #(1774318590197960379894041243519834746982739733398323301337616318873537777950275319196578552913386) #(1718937788111482821942210882461526135436722876154440416937421311812719990303859780811692505736861) #(617532041218898949256694234129349687263173747296756218330557820520673400962360949082735008439752) #(1095969552983535636386462156538940436826368766797245654231946566516721724568138750416772901428309) #(524652563266994682385909902645559336055936923172985654257598083130903478889110921971171166935124) #(394046274693563635599870757235770233089927986811649212969976036788667961805753799141444764024700) #(125849789727003939541473519253183932072060360273978752148421129963160864903463621982614374769437) #(1959177334804233992903405200846946700465010380673551824974214543330708616545061441538072090759484) #(626470777848950232484699691494532187673904026906280225948706120960245999666199696324968647619112) #(769240826847047264036151850098574019640021389444229614995339642694186237534912044091761250376678) #(383130169271768027561234780859264604938248289170121513035738192663406305411335776834937527116174) #(1258112471292220677139669468317981771234467482101606243409476552969238372305298710448938498191193) #(1387935788454589198470464370451448667815764751624911647744108339058649244764729762627779519401849) #(1779230976094915603803973260739985763085795447241066443000194759021927440191351064120101034456141) #(1253968180530966977774663921449586600308352880412266716885580698187297448848574020071877718389481) #(987645798129410122447002563984015022598382124374890854706525924930574728811742477018893618856985) #(2019454878570530687223453178161547267635728333558722377354736084742533493386946458685212121152021) #(1180072121412537468390130866600419723022759741885305870251075491642366080809664656021361548122797) #(1668911527457024381377562132102203926798979920539620346509245740218353834441503786084933687765005) #(297707648178715171860913691745258224382632342446968820852702421018892699881589531078071907292207) #(733184232380903992473659236120564957456576026685064890194631158830386914456632607361670828996299) #(1779626186203367986363308523419131494209679003561615856715526489888385324850226242561180146779485) #(8927446921314660605466139698824963649639063495095095997556187760216136573534960920097869726334) #(77662350965129251754805232875207622961960738703670791732828267228685833638218999222875439883012) #(414885569344071106109662396033812926290708710399040005966468261161287203371414152969866005651828) #(1739841838800097405512014875249860028158779053841583082148387479005722076492748033447023259967193) #(364617628938593902617673626376294680996326985650907848667928237359613673711734459569699656801813) #(714465277337889291329581803601742706530113974097034203192332529015935004091509299386963158679583) #(1013148560118480897501091380407198246111405369990383565433187646771857299621061439489710517289588) #(301002060269495009669256606279189777672760019679303370672275045732762295721474732173850910638548) #(1619423854291027925479865168693754029353439239893243303839459349340774467765666686525200824019280) #(735681272426469239755294831608159764719036837507279074377800176285395258655006121610295732925614) #(688314840045691040457161849924304573496220369144305595487768114383474587815951706087362870990371) #(1082613656693687653922989660970254345807677953972948570002669623244903845043376220544459930258133) #(1248782205258636984279860833828183288336966622411360970611089879511917507242061391282538719974965) #(1876075633349250289845486979223123535751495922767408092894001963391838748825566679506351012255441) #(2093824585626964221682743480593184735690261458915023236885074538856320308878652763039732949698578) #(395889203943628681973584749364067983261123767594348748872242085256112404899918153179397349093277) #(221181866776267147771948125154304537746178122844056612638803482522483627989697614264425188895421) #(496546311500668005647147173975793441397761209290301385945943911629949395473376431555252172797438) #(434658216911748403910045795470762514954865987773845704498683788455106077242223428375597874983343) #(161200440992333985852689869948775673294250288359935356123378662403091483336715003347247942654845) #(308446558063516413542513477012336137348152192559453743614408745634719200972691238323358856856611) #(812439236641208990783148558157555242199750927902351728846797607063444538558666976002956476077330) #(1638120385746295544835456857963694449824557128366211258912346736616044059041958597807855219774180) #(551201787212116005776248690883147205275119392747490349292990086006192808547928781874589679508009) #(1597553128125577934394162641479754193620143963041473116776884851429279410062524538315437462885192) #(441000674274858270230622199201821394537869896989054101515140885874180487272629087160343683738678) #(404010784283025367696265689879238821759666783070719734694422519003413871531726263265278055617512) #(458890314854600948918694289118299108542038156843903836967520478159262254586323040989636518101402) #(326011146609196984491018088786060246946546823140520572910264069255423628930548196493618811395406) #(1536965135124443150177210983376249156570903636270455131452524233541375433693033552171168639493999) #(1294733844200872313265044570253901567177692166433806793108555792405531326588323890350159980546596) #(1324687753376810475173358611568629335510855614643936180399403630183110882797468893909082427329467) #(621047830618558362489762600447083813908321508347985386887669263243244273584451964121347867892072) #(526311510830883189264208380918665343319413956185088793712722410151602026405344647599629158002824) #(2033268086118131127715292156558733552544552156789274671769972298243850909368298032034961238879515) #(2048805517271555040760068264421536632708000500037299541481127943128682848042007298120168517879425) #(1420522144356284303694670913127497110231234832031589792755103148639080526263208956667379995371905) #(1432712311515977943912300076156132190466173241505962932402458038623324346998045768642945498933889) #(714492835949446139212553961849616712743466767563545066836532785592072878813601695401959708598005) #(466069093306317892366298643159191387930426872362845000228531082629652014319864600305248171224203) #(1513742822118669594050100933752656051258522439148306025387041501837397107289658710370380846451507) #(474316691648567378901586724598414252020937538800475005364099221855575651151376934708422636608318) #(1656834512939947784772898852240173781029335878086958578047450296194677337146656625455850228733494) #(857813426135481895128463051017966042484241086207687035956709965964150572020475814708198911389557) #(134962731410265052280310507215224499637909196139953743397406389562619493409853195931764637139385) #(1999321848094198575334906206005097099279362466517623989573390245428058675700128855118793415210946) #(160132565936167061793223445962222768286631017260924799228016356111441230804383350318397577452464) #(1173701797633942714702779105866966398354770194223765495589622747825075571879752238027967870403263) #(1149213502643521149245203482828237780569953573646011845801785464544104173084272516907694396562133) #(558820064016431266358440780769727870992428353052035432974616464262331835283817818903925758876199) #(1244437617331391166000126783504368983499490157501794871857641364758545767239690975960125857767210) #(1208274809855344779887028681942576905828748759094313791103016984602163150825582806558068651395440) #(912803692609138568090384009723347879914067407247467433883136701357044784566125728158758990575109) #(1931953458158064145691674530522201828781971262315091760065195702309511278276104852122788751491286) #(780739618303227107916777227103792285685472803498687237722609756641846735723515089400032857075676) #(1896241988939798512070122738275954588679847830181557481607830317403421171659062548453047590154035) #(1515778410428479804128982773846886644506765456833680413282164738828073275532894917553096686095511) #(1109535696068487161525065332962142490517542315880588947542434410361949970679904862473983035950905) #(808315965495049032971081114985088971405694798806985036750610871430772069009204075454179373067740) #(850277847660129349310864697569128363992578982532215105339864934310356414989936112204620187980283) #(1809743087216727041141135587085014735987109126566733910357890828781819903498797865961699823050704))))

;; Provide the Public Key ID
(send kvdb:kvdb sink :add :my-fpkeyid "{B2DA77DC-B596-11EE-8E31-CB2DA3737401}")

;; Provoide the Public Key
(let* ((sys  (ask lattice-system))
       (skey (ask lattice-skey))
       (pkey (fgen-pkey skey sys)))
  (send kvdb:kvdb sink :add "{B2DA77DC-B596-11EE-8E31-CB2DA3737401}" pkey))

  ;; -----------------------------------------------------------------------------
|#

