;; edwards-tpm.lisp
;;
;; DM/RAL  2023/02/22 02:35:27
;; ----------------------------------

(in-package #:edec)

;; ----------------------------------

(DEFUN SMULT (PT)
  (COND ((ED-VALID-POINT-P PT)
         (LET ((WC (MAKE-BIPOLAR-WINDOW-CACHE :NBITS 4 :PT PT)) (ANS (ED-PROJECTIVE (ED-NEUTRAL-POINT))))
           (SETF (AREF (BIPOLAR-WINDOW-CACHE-PRECV WC) 8) ANS)
           (FLET ((ACC (IX)
                    (SETF ANS
                          (ED-PROJECTIVE-ADD
                           (GET-PREC WC IX)
                           (ED-PROJECTIVE-DOUBLE
                            (ED-PROJECTIVE-DOUBLE (ED-PROJECTIVE-DOUBLE (ED-PROJECTIVE-DOUBLE ANS))))))))
             (ACC 0)
             (ACC 1)
             (ACC 2)
             (ACC -1)
             (ACC 1)
             (ACC -4)
             (ACC 7)
             (ACC 0)
             (ACC 3)
             (ACC 6)
             (ACC 5)
             (ACC -2)
             (ACC -7)
             (ACC -3)
             (ACC -1)
             (ACC 2)
             (ACC -6)
             (ACC -2)
             (ACC -3)
             (ACC 3)
             (ACC -3)
             (ACC -3)
             (ACC 4)
             (ACC 6)
             (ACC 3)
             (ACC -4)
             (ACC 7)
             (ACC 3)
             (ACC 0)
             (ACC 3)
             (ACC -5)
             (ACC 1)
             (ACC 6)
             (ACC 7)
             (ACC 2)
             (ACC -1)
             (ACC -1)
             (ACC -4)
             (ACC -2)
             (ACC -3)
             (ACC -2)
             (ACC 5)
             (ACC 3)
             (ACC 3)
             (ACC -8)
             (ACC -7)
             (ACC -1)
             (ACC 2)
             (ACC 5)
             (ACC -8)
             (ACC -4)
             (ACC -7)
             (ACC 1)
             (ACC -5)
             (ACC -7)
             (ACC -6)
             (ACC -7)
             (ACC -8)
             (ACC 3)
             (ACC -3)
             (ACC -2)
             (ACC 5)
             (ACC 4)
             (ACC 7)
             ANS)))
        (T (ED-PROJECTIVE (ED-NEUTRAL-POINT)))))

(defun delivered-smult ()
  (let ((status 0))
    (handler-case
        (let* ((hexpt (cadr sys:*line-arguments-list*))
               (pt    (ed-decompress-pt (read-from-string hexpt)))
               (ans   (ed-compress-pt (smult pt))))
          (with-standard-io-syntax
            (format t "#x~X~%" (int ans))) )

      (error (err)
        (setf status 1)
        (format t "~A~%" err)))
    (lw:quit :status status)))

(defun gen-mult (n)
  (let ((ws (edec::windows n 4)))
    `(defun smult (pt)
       (cond ((ed-valid-point-p pt)
              (let ((wc   (make-bipolar-window-cache
                           :nbits 4
                           :pt    pt))
                    (ans  (ed-projective (ed-neutral-point))))
                (setf (aref (bipolar-window-cache-precv wc) 8) ans)
                (flet ((acc (ix)
                         (setf ans (ed-projective-add (get-prec wc ix)
                                                      (ed-projective-double
                                                       (ed-projective-double
                                                        (ed-projective-double
                                                         (ed-projective-double ans))))
                                                      ))
                         ))
                  ,@(loop for w in ws collect `(acc ,w))
                  ans)))
             (t
              (ed-projective (ed-neutral-point)))
             ))
    ))
  