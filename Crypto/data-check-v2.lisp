
(in-package :edec-ff)

(defmacro gen-chk-sig (place)
  `(list* ',place (cdr (ssig-sign ,place))))

(defun verify-chk-sig (chk-sig)
  (with-simple-restart (continue "Check remaining signatures")
    (assert (apply #'ssig-verify
                   (eval (car chk-sig))
                   (cdr chk-sig))
        ()
      "Data does not match signature: ~A" (car chk-sig)
      )))

;; -------------------------------------------------
(with-ed-curve :curve1174
  (unless (boundp '*my-pkey*)
    (multiple-value-bind (pkey shares)
        (gen-key-pair)
      (distribute-shares shares)
      (setf *my-pkey* pkey)))
  (assert (ed-pt= *my-pkey*
                  (ed-mul *ed-gen* *my-skey*))
      ))
;; ---------------------------------------------------
#|
(with-ed-curve :curve1174
  (let ((*print-readably* t)
        (*print-radix*    t))
    (pprint
     (loop for sym in '(*my-pkey*
                        *my-skey*
                        *curve1174*
                        *curve-E382*
                        *curve41417*
                        *curve-Ed448*
                        *curve-e521*
                        *curve-Ed3363*
                        core-crypto::*wordlist*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))

#-:WINDOWS
(with-ed-curve :curve1174
  (let ((*print-readably* t)
        (*print-radix*    t))
    (pprint
     (loop for sym in '(pbc::*pairing-fr449-params*
                        pbc::*pairing-fr256-params*
                        pbc::*pairing-fr255-params*
                        pbc::*pairing-fr250-params*
                        pbc::*pairing-fr248-params*
                        pbc::*pairing-fr247-params*
                        pbc::*pairing-fr256-params-old*
                        pbc::*pairing-default-ar160-params*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))
|#

(with-ed-curve :curve1174
  (dolist (sig
           '((*MY-PKEY*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  45900949814078921133467255518227002798883377311787637127841317567448213485.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "B558E15A71C4F6C7B494270E29B8004A2E6AC0E2791C99E0AD4B6EE3F6200B4F"))))
 (*MY-SKEY*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  552846570049438414517969474514853483242513865173647317640381145792647314109.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "7308F1A6FE027082A2A04EA47A36E8D987B9F06CA31C2D228E7B3785D6C268A7"))))
 (*CURVE1174*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  111911606694441764940061320781683677410662937497654126908270591459931604824.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "2135E7FCC1BB8E4F8CA358B17083C82FD51DF0F3A5F0244D0802FAB04A9723BF"))))
 (*CURVE-E382*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  353791196839247365458802384286673074304874079470117014528035240414817937062.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "0561BF3255B76DE1F8F2B2F12D0E4388F73CD5DC831A73D75B42AEBBCFBF198A"))))
 (*CURVE41417*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  734407123972265713878376730504601630191238191001468574245222460294835001584.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "602AB62D95243DEE474A8980A702C2A60F13518DA74183B9DD96D777E22F64F3"))))
 (*CURVE-ED448*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  524169189358984174781728808220119163773961417369381927502833864983080408859.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "8C7C783D25A0C0310537657CA9DFCF2A15EBCC525AEDD6AA4CD45C937CCBD9DD"))))
 (*CURVE-E521*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  697275621018354156910170373156998776550127548608555384475478548840646749971.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "9D18CE8B346E295BA6DD7E84970B4DE900AED134B66931D32E0798537A09BBA4"))))
 (*CURVE-ED3363*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  762931673634160866434913086510705826777301504272515723428263327718504920084.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "83678C3A0321DDB36F068C4751584A400B86BC05326BCA728EF52FA99627C738"))))
 (COM.RAL.CRYPTO.CORE-CRYPTO::*WORDLIST*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  495952073061202864963999706913148016915671128245093397046735136733508529131.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "7FE96FE8AE57A2A4FB599C7F061B46FE734FF1EF11F20E4ACBCB04A87C0BC0FB"))))))
    (verify-chk-sig sig)))

(when (boundp 'pbc-interface::*pairing-fr449-params*)
  (with-ed-curve :curve1174
    (dolist (sig
             '((PBC-INTERFACE::*PAIRING-FR449-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                567634031224075103458277995620484480966890591976384874346576208801461634490.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "2FFE5421824BBE2D2C34AD6EF42EA2A5A767A55D0C4A3B91E5CED02859F06D42"))))
               (PBC-INTERFACE::*PAIRING-FR256-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                13729535899391894587464717838898627614831747994732831369997072545871472882.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "010B8465473938715833C0E2D9AD76033AB947DDAA6B1F33DFB0741FC36E5751"))))
               (PBC-INTERFACE::*PAIRING-FR255-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                146913311914839357832818609433691276117903667559683461495173177972090195143.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "3202A55075FF0FDA92389F680CD9848FBFF86069C668B63170DD10F8C824C742"))))
               (PBC-INTERFACE::*PAIRING-FR250-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                182711763030100476720659762154254806352829833296584761328012844044705719121.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "0E73C2847510231EB6E4B097E6867F965BA29C7800A8F93AC59811254DAAB8B5"))))
               (PBC-INTERFACE::*PAIRING-FR248-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                347965866204566098551555447789353573381258081077886134615186426331342876096.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "1E6BB0FD9D429BA9DE56A1FF1CDFC11ED971269F582041FFF3A4CC0926CB6AED"))))
               (PBC-INTERFACE::*PAIRING-FR247-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                542155640578904169838495658575767213684293238389045491328987920127437984394.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "D1AF0C0A4D2252BFA443C0BD076B2FA15541C0023C80B71B3D6ACB23414F96D0"))))
               (PBC-INTERFACE::*PAIRING-FR256-PARAMS-OLD*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                297692343405769506554266456238063958808620663534763031574012188183659030830.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "7EEB55FE7BFF33DC4E63BBB2BE7F46967523A59D4E2B2CB567B4F6AC50D5DBCE"))))
               (PBC-INTERFACE::*PAIRING-DEFAULT-AR160-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                195961487675684930235628293478716013455218172168674655976564529825408459386.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "4767C632BA1B964164F73F7927DAE55A3A51C09185988050C69683C37010D83F"))))))
      (verify-chk-sig sig))))
