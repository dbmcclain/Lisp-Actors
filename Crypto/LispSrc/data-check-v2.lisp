
(in-package :edec-ff)

(defmacro gen-chk-sig (place)
  `(list* ',place (cdr (ssig-sign ,place))))

(defun verify-chk-sig (chk-sig)
  (with-simple-restart (continue "Check remaining signatures")
    (assert (apply #'ssig-verify
                   (eval (car chk-sig))
                   (cdr chk-sig))
        ()
      "Data does not match signature: ~A" (car chk-sig)
      )))

;; -------------------------------------------------
(with-ed-curve :curve1174
  (unless (boundp '*my-pkey*)
    (multiple-value-bind (pkey shares)
        (gen-key-pair)
      (distribute-shares shares)
      (setf *my-pkey* pkey)))
  (assert (ed-pt= *my-pkey*
                  (ed-mul *ed-gen* *my-skey*))
      ))
;; ---------------------------------------------------
#|
(with-ed-curve :curve1174
  (let ((*print-readably* t)
        (*print-radix*    t))
    (pprint
     (loop for sym in '(*my-pkey*
                        *my-skey*
                        *curve1174*
                        *curve-E382*
                        *curve41417*
                        *curve-Ed448*
                        *curve-e521*
                        *curve-Ed3363*
                        core-crypto::*wordlist*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))

#-:WINDOWS
(with-ed-curve :curve1174
  (let ((*print-readably* t)
        (*print-radix*    t))
    (pprint
     (loop for sym in '(pbc::*pairing-fr449-params*
                        pbc::*pairing-fr256-params*
                        pbc::*pairing-fr255-params*
                        pbc::*pairing-fr250-params*
                        pbc::*pairing-fr248-params*
                        pbc::*pairing-fr247-params*
                        pbc::*pairing-fr256-params-old*
                        pbc::*pairing-default-ar160-params*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))
|#

(with-ed-curve :curve1174
  (dolist (sig
           '((*MY-PKEY*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  519654351918763200372810178407763263861020203568285409949351152060801835720.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "208EF375199ED1D4FC9295CBF5E7E424E81D395C84BC67D062356A97078D4ADA"))))
 (*MY-SKEY*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  462783103650758142707039945782557417713365986823340492825065965766553044007.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "9AABD1616E7DD0915A60502AE952C0FE4CAD23B91BD81382AFE4AAF687EE46E9"))))
 (*CURVE1174*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  548540554350023664659588612946643740543546376856783630940815881365577404378.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "D3018A90E0F5C46CAC51B95A0BC0D20E2368B8C09BD90B217BDCCB1D3DE76657"))))
 (*CURVE-E382*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  398876518872482674189788252262243997329672979551621194813702789206888459144.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "A4F4551AC2C2A1B99401161197B985816469294DA43CDA3BDEF9607045B7D4C0"))))
 (*CURVE41417*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  831484444128623321993073038716895061511984735649752815896108651371003728986.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "40563157799BFF439DE7376D7F2A02C3AF7BA1094DFDA3CD2CFA0AF19C178BCB"))))
 (*CURVE-ED448*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  529462666206899329590268886969216484396393059557444425354398842679278595640.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "6F97AF484A3E65E36FDDF5CB6416A2D4F6D6165C6AB44754FE7C2C212D7BEF44"))))
 (*CURVE-E521*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  183526856307401048366334752235722529809379334496521185715695050170681616830.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "F809E1BFD06F5B7027E2FDB2522E875C6C53EE78588BAB31E83288CC84D5FE90"))))
 (*CURVE-ED3363*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  52322181938864512171321820128273363934965302738166296371975313103166607499.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "340D42BB0D5B494141A50FA0EC2B511FC6884D998C6F3BEDD42B95E2DF9B3506"))))
 (COM.RAL.CRYPTO.CORE-CRYPTO::*WORDLIST*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  618278340319226619521757939771353947396681281107275037532328907079690678403.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "077445F5CE687055A9606D7F24F8C5B9B4D4569A2CABB8417FD9B9263AAE99D7"))))))
    (verify-chk-sig sig)))

(when (boundp 'pbc-interface::*pairing-fr449-params*)
  (with-ed-curve :curve1174
    (dolist (sig
             '((PBC-INTERFACE::*PAIRING-FR449-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                567634031224075103458277995620484480966890591976384874346576208801461634490.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "2FFE5421824BBE2D2C34AD6EF42EA2A5A767A55D0C4A3B91E5CED02859F06D42"))))
               (PBC-INTERFACE::*PAIRING-FR256-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                13729535899391894587464717838898627614831747994732831369997072545871472882.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "010B8465473938715833C0E2D9AD76033AB947DDAA6B1F33DFB0741FC36E5751"))))
               (PBC-INTERFACE::*PAIRING-FR255-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                146913311914839357832818609433691276117903667559683461495173177972090195143.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "3202A55075FF0FDA92389F680CD9848FBFF86069C668B63170DD10F8C824C742"))))
               (PBC-INTERFACE::*PAIRING-FR250-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                182711763030100476720659762154254806352829833296584761328012844044705719121.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "0E73C2847510231EB6E4B097E6867F965BA29C7800A8F93AC59811254DAAB8B5"))))
               (PBC-INTERFACE::*PAIRING-FR248-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                347965866204566098551555447789353573381258081077886134615186426331342876096.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "1E6BB0FD9D429BA9DE56A1FF1CDFC11ED971269F582041FFF3A4CC0926CB6AED"))))
               (PBC-INTERFACE::*PAIRING-FR247-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                542155640578904169838495658575767213684293238389045491328987920127437984394.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "D1AF0C0A4D2252BFA443C0BD076B2FA15541C0023C80B71B3D6ACB23414F96D0"))))
               (PBC-INTERFACE::*PAIRING-FR256-PARAMS-OLD*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                297692343405769506554266456238063958808620663534763031574012188183659030830.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "7EEB55FE7BFF33DC4E63BBB2BE7F46967523A59D4E2B2CB567B4F6AC50D5DBCE"))))
               (PBC-INTERFACE::*PAIRING-DEFAULT-AR160-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                195961487675684930235628293478716013455218172168674655976564529825408459386.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "4767C632BA1B964164F73F7927DAE55A3A51C09185988050C69683C37010D83F"))))))
      (verify-chk-sig sig))))
