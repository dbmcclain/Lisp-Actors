
(in-package :edec-mm)

(defmacro gen-chk-sig (place)
  `(list* ',place (cdr (ssig-sign ,place))))

(defun verify-chk-sig (chk-sig)
  (with-simple-restart (continue "Check remaining signatures")
    (assert (apply #'ssig-verify
                   (eval (car chk-sig))
                   (cdr chk-sig))
        ()
      "Data does not match signature: ~A" (car chk-sig)
      )))

;; -------------------------------------------------
(with-ed-curve :curve1174
  (unless (boundp '*my-pkey*)
    (multiple-value-bind (pkey shares)
        (gen-key-pair)
      (distribute-shares shares)
      (setf *my-pkey* pkey)))
  (assert (ed-pt= *my-pkey*
                  (ed-mul *ed-gen* *my-skey*))
      ))
;; ---------------------------------------------------
#|
(with-ed-curve :curve1174
  (let ((*print-readably* t)
        (*print-radix*    t))
    (pprint
     (loop for sym in '(*my-pkey*
                        *my-skey*
                        *curve1174*
                        *curve-E382*
                        *curve41417*
                        *curve-Ed448*
                        *curve-e521*
                        *curve-Ed3363*
                        core-crypto::*wordlist*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))

#-:WINDOWS
(with-ed-curve :curve1174
  (let ((*print-readably* t)
        (*print-radix*    t))
    (pprint
     (loop for sym in '(pbc::*pairing-fr449-params*
                        pbc::*pairing-fr256-params*
                        pbc::*pairing-fr255-params*
                        pbc::*pairing-fr250-params*
                        pbc::*pairing-fr248-params*
                        pbc::*pairing-fr247-params*
                        pbc::*pairing-fr256-params-old*
                        pbc::*pairing-default-ar160-params*)
           collect
           (eval `(gen-chk-sig ,sym))
           ))))
|#

(with-ed-curve :curve1174
  (dolist (sig
           '((*MY-PKEY*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  82802553659827750654955267025501418643058405056635491097378898619838179138.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "CEB5929094DAFFD2BF2677E36548B9F99ED466C0E76F5DEEB455129CF576B267"))))
 (*MY-SKEY*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  499449942235410366846482989382870126307825590227487715544864219953491905691.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "078B1ED0C18B106F043CAA0843C51C331616FBB259F913A4B76759F98F056BAC"))))
 (*CURVE1174*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  219460161788418302387372342425553551656720310595110483303710335870498949573.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "385DA27AE9FD9D6F82410AB032A6AD9D414ED12DC59D8B8A62EAE4830650DC8B"))))
 (*CURVE-E382*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  114284599064795407081883142373278639007618562195589368733421348195494500724.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "DE4ADF2E4D222218FA592BF73576EE147D5B7239CD94F7B5528FCBD09180AAFF"))))
 (*CURVE41417*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  663112848703879876869986520902593155917428576991274033172750612907218959744.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "CC2F451A1BECC89F49828B7CEFA94EFE52FFF32FE0A6F0AC99660F78E347612C"))))
 (*CURVE-ED448*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  857877690659887150415128045797542914391271590108194267491240707243545804915.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "3D56DC00E99DE9FB4FADE6D3A51BE7FDAECB35AA1D6AC1F32157EF00E29CD95F"))))
 (*CURVE-E521*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  844590106980539835061966380543619959551369609755053552302080506121476980125.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "95C35C8A432657F66FA253323CF319E84E88F373150CA448FF6185D35ACDB19A"))))
 (*CURVE-ED3363*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  748831510156332002936073579341133182657551898441216575578057736947980863568.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "48BAC677025F29E0E6FE940F29272B31DE6741CDA26B2AE7903B3EE7654FA14A"))))
 (COM.RAL.CRYPTO.CORE-CRYPTO::*WORDLIST*
  #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
  539666631300541266857228165899290047552380613698136375540982735282073588757.
  #.(make-instance 'COM.RAL.CRYPTO.HASH:HASH/256 :val (COM.RAL.VEC-REPR:BEV-VEC (COM.RAL.VEC-REPR:HEX "63D38F11C8DBCDFF2699781899578C42505F30FFF84D069372D77772C5827A74"))))))
    (verify-chk-sig sig)))

(when (boundp 'pbc-interface::*pairing-fr449-params*)
  (with-ed-curve :curve1174
    (dolist (sig
             '((PBC-INTERFACE::*PAIRING-FR449-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                567634031224075103458277995620484480966890591976384874346576208801461634490.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "2FFE5421824BBE2D2C34AD6EF42EA2A5A767A55D0C4A3B91E5CED02859F06D42"))))
               (PBC-INTERFACE::*PAIRING-FR256-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                13729535899391894587464717838898627614831747994732831369997072545871472882.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "010B8465473938715833C0E2D9AD76033AB947DDAA6B1F33DFB0741FC36E5751"))))
               (PBC-INTERFACE::*PAIRING-FR255-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                146913311914839357832818609433691276117903667559683461495173177972090195143.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "3202A55075FF0FDA92389F680CD9848FBFF86069C668B63170DD10F8C824C742"))))
               (PBC-INTERFACE::*PAIRING-FR250-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                182711763030100476720659762154254806352829833296584761328012844044705719121.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "0E73C2847510231EB6E4B097E6867F965BA29C7800A8F93AC59811254DAAB8B5"))))
               (PBC-INTERFACE::*PAIRING-FR248-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                347965866204566098551555447789353573381258081077886134615186426331342876096.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "1E6BB0FD9D429BA9DE56A1FF1CDFC11ED971269F582041FFF3A4CC0926CB6AED"))))
               (PBC-INTERFACE::*PAIRING-FR247-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                542155640578904169838495658575767213684293238389045491328987920127437984394.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "D1AF0C0A4D2252BFA443C0BD076B2FA15541C0023C80B71B3D6ACB23414F96D0"))))
               (PBC-INTERFACE::*PAIRING-FR256-PARAMS-OLD*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                297692343405769506554266456238063958808620663534763031574012188183659030830.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "7EEB55FE7BFF33DC4E63BBB2BE7F46967523A59D4E2B2CB567B4F6AC50D5DBCE"))))
               (PBC-INTERFACE::*PAIRING-DEFAULT-AR160-PARAMS*
                #S(ECC-CMPR-PT :CX 3238706287253458695043697889970663825594649144648473593115026994751520435692.)
                195961487675684930235628293478716013455218172168674655976564529825408459386.
                #.(make-instance 'HASH:HASH/256 :val (bev-vec (hex "4767C632BA1B964164F73F7927DAE55A3A51C09185988050C69683C37010D83F"))))))
      (verify-chk-sig sig))))
